"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8898],{3331:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var s=r(8101);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},7080:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/node/worker","title":"Worker","description":"Enhanced Worker implementation that extends Node.js worker_threads.Worker. This class adds environment variable sharing across different Node.js runtime environments, exit event fallback for environments where worker exit events aren\'t natively supported, and better cross-runtime compatibility (Node.js, Deno, Bun).","source":"@site/docs/api/node/worker.md","sourceDirName":"api/node","slug":"/api/node/worker","permalink":"/threadpool/docs/api/node/worker","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/threadpool/tree/master/docs/docs/api/node/worker.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"WorkerPool","permalink":"/threadpool/docs/api/node/worker-pool"},"next":{"title":"Exit Event Support","permalink":"/threadpool/docs/api/node/exit-event-support"}}');var t=r(5105),i=r(3331);const o={sidebar_position:3},l="Worker",a={},d=[{value:"Types",id:"types",level:2},{value:"ThreadWorkerOptions",id:"threadworkeroptions",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Examples",id:"examples",level:4},{value:"on",id:"on",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns",level:4},{value:"once",id:"once",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-1",level:4},{value:"off",id:"off",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Events",id:"events",level:2},{value:"message",id:"message",level:3},{value:"messageerror",id:"messageerror",level:3},{value:"error",id:"error",level:3},{value:"exit",id:"exit",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"worker",children:"Worker"})}),"\n",(0,t.jsx)(n.p,{children:"Enhanced Worker implementation that extends Node.js worker_threads.Worker. This class adds environment variable sharing across different Node.js runtime environments, exit event fallback for environments where worker exit events aren't natively supported, and better cross-runtime compatibility (Node.js, Deno, Bun)."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Create a worker with exit fallback for compatibility\nconst worker = new Worker('./worker-script.js', {\n  exitFallback: true,\n  workerData: { inputData: [1, 2, 3] }\n});\n\n// Listen for messages\nworker.on('message', (result) => {\n  console.log('Worker result:', result);\n});\n\n// Listen for exit (works consistently across environments)\nworker.on('exit', (code) => {\n  console.log(`Worker exited with code ${code}`);\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,t.jsx)(n.h3,{id:"threadworkeroptions",children:"ThreadWorkerOptions"}),"\n",(0,t.jsx)(n.p,{children:"Extended options for creating a Worker instance."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type ThreadWorkerOptions = WorkerOptions & {\n  file?: string | URL;     // Path to the worker script file\n  meta?: any;              // Optional metadata to associate with the worker\n  exitFallback?: boolean;  // Whether to use message-based exit fallback\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"constructor",children:"constructor"}),"\n",(0,t.jsx)(n.p,{children:"Creates a new Worker instance."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"constructor(filename: string | URL, options?: WorkerOptions)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filename"}),": Path to the worker script file"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"}),": (Optional) Worker options"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// With default options\nconst worker = new Worker('./worker.js')\n\n// With environment sharing and worker data\nconst worker = new Worker('./worker.js', {\n  workerData: { config: { maxItems: 100 } },\n  env: SHARE_ENV,\n})\n\n// With exit fallback for cross-runtime compatibility\nconst worker = new Worker('./worker.js', {\n  exitFallback: true,\n  workerData: { inputData: [1, 2, 3] },\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"on",children:"on"}),"\n",(0,t.jsx)(n.p,{children:"Adds an event listener for the specified event. The listener persists until removed."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"on(event: string, listener: EventListener): this\n"})}),"\n",(0,t.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event"}),": Event name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"listener"}),": Event listener function"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This instance for chaining"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"once",children:"once"}),"\n",(0,t.jsx)(n.p,{children:"Adds a one-time event listener for the specified event. The listener is removed after being invoked once."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"once(event: string, listener: EventListener): this\n"})}),"\n",(0,t.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event"}),": Event name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"listener"}),": Event listener function"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This instance for chaining"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"off",children:"off"}),"\n",(0,t.jsx)(n.p,{children:"Removes an event listener for the specified event."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"off(event: string, listener: EventListener): this\n"})}),"\n",(0,t.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event"}),": Event name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"listener"}),": Event listener function to remove"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This instance for chaining"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,t.jsx)(n.p,{children:"The Worker class emits several events that you can listen for:"}),"\n",(0,t.jsx)(n.h3,{id:"message",children:"message"}),"\n",(0,t.jsx)(n.p,{children:"Emitted when the worker sends a message to the parent thread"}),"\n",(0,t.jsx)(n.h3,{id:"messageerror",children:"messageerror"}),"\n",(0,t.jsx)(n.p,{children:"Emitted when message deserialization fails"}),"\n",(0,t.jsx)(n.h3,{id:"error",children:"error"}),"\n",(0,t.jsx)(n.p,{children:"Emitted when the worker throws an uncaught exception"}),"\n",(0,t.jsx)(n.h3,{id:"exit",children:"exit"}),"\n",(0,t.jsx)(n.p,{children:"Emitted when the worker exits (with exitCode)"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);
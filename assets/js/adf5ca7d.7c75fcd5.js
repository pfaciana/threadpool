"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9478],{3331:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>i});var s=n(8101);const t={},a=s.createContext(t);function l(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(a.Provider,{value:r},e.children)}},6410:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/node/worker-thread","title":"WorkerThread","description":"Manages a worker thread lifecycle with state tracking and event handling. WorkerThread provides a higher-level API on top of Node.js worker_threads, handling thread lifecycle management, state tracking, and offering a Promise-like API for working with worker results.","source":"@site/docs/api/node/worker-thread.md","sourceDirName":"api/node","slug":"/api/node/worker-thread","permalink":"/threadpool/docs/api/node/worker-thread","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/threadpool/tree/master/docs/docs/api/node/worker-thread.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Worker API","permalink":"/threadpool/docs/category/worker-api"},"next":{"title":"WorkerPool","permalink":"/threadpool/docs/api/node/worker-pool"}}');var t=n(5105),a=n(3331);const l={sidebar_position:1},i="WorkerThread",o={},d=[{value:"Types",id:"types",level:2},{value:"WorkerThreadOptions",id:"workerthreadoptions",level:3},{value:"Properties",id:"properties",level:2},{value:"status",id:"status",level:3},{value:"worker",id:"worker",level:3},{value:"message",id:"message",level:3},{value:"error",id:"error",level:3},{value:"meta",id:"meta",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Examples",id:"examples",level:4},{value:"getWorker",id:"getworker",level:3},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"start",id:"start",level:3},{value:"then",id:"then",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"catch",id:"catch",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"finally",id:"finally",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Events",id:"events",level:2},{value:"init",id:"init",level:3},{value:"online",id:"online",level:3},{value:"message",id:"message-1",level:3},{value:"messageerror",id:"messageerror",level:3},{value:"error",id:"error-1",level:3},{value:"exit",id:"exit",level:3},{value:"status",id:"status-1",level:3}];function h(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"workerthread",children:"WorkerThread"})}),"\n",(0,t.jsx)(r.p,{children:"Manages a worker thread lifecycle with state tracking and event handling. WorkerThread provides a higher-level API on top of Node.js worker_threads, handling thread lifecycle management, state tracking, and offering a Promise-like API for working with worker results."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"// Create a worker thread\nconst thread = new WorkerThread('./my-worker.js', {\n  workerData: { input: [1, 2, 3] },\n})\n\n// Listen for messages from the worker\nthread.on('message', (data) => {\n  console.log('Worker sent:', data)\n})\n\n// Start the worker\nthread.start()\n\n// Or use Promise-like API\nthread\n  .then(result => console.log('Worker result:', result))\n  .catch((error, type) => console.error(`Worker error (${type}):`, error))\n  .finally(exitCode => console.log(`Worker exited with code ${exitCode}`))\n"})}),"\n",(0,t.jsx)(r.h2,{id:"types",children:"Types"}),"\n",(0,t.jsx)(r.h3,{id:"workerthreadoptions",children:"WorkerThreadOptions"}),"\n",(0,t.jsx)(r.p,{children:"Supported constructor argument patterns for WorkerThread."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"type WorkerThreadOptions =\n  | [file: string | URL, options: ThreadWorkerOptions, meta: any] // 3 arguments\n  | [file: string | URL, options: ThreadWorkerOptions] // 2 arguments\n  | [options: ThreadWorkerOptions]; // 1 argument\n"})}),"\n",(0,t.jsx)(r.p,{children:"Three different calling patterns are supported:"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"new WorkerThread(options)"})," - With file path in the options object"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"new WorkerThread(file, options)"})," - With separate file path and options"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"new WorkerThread(file, options, meta)"})," - With separate file, options and metadata"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(r.h3,{id:"status",children:"status"}),"\n",(0,t.jsx)(r.p,{children:"Gets the current thread status."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"get status(): ThreadStatus\n"})}),"\n",(0,t.jsx)(r.h3,{id:"worker",children:"worker"}),"\n",(0,t.jsx)(r.p,{children:"Gets the underlying Worker instance (if started)."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"get worker(): Worker | undefined\n"})}),"\n",(0,t.jsx)(r.h3,{id:"message",children:"message"}),"\n",(0,t.jsx)(r.p,{children:"Gets the latest message received from the worker."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"get message(): any\n"})}),"\n",(0,t.jsx)(r.h3,{id:"error",children:"error"}),"\n",(0,t.jsx)(r.p,{children:"Gets any error that occurred in the worker."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"get error(): any\n"})}),"\n",(0,t.jsx)(r.h3,{id:"meta",children:"meta"}),"\n",(0,t.jsx)(r.p,{children:"Optional metadata associated with the worker thread."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"meta: any | undefined\n"})}),"\n",(0,t.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(r.h3,{id:"constructor",children:"constructor"}),"\n",(0,t.jsx)(r.p,{children:"Creates a new WorkerThread instance."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"constructor(...workerArgs: WorkerThreadOptions)\n"})}),"\n",(0,t.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"workerArgs"}),": Worker configuration arguments"]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"// Option 1: All options in a single object\nconst thread1 = new WorkerThread({\n  file: './worker.js',\n  workerData: { input: [1, 2, 3] },\n  meta: { id: 'worker-1' },\n})\n\n// Option 2: Separate file and options\nconst thread2 = new WorkerThread('./worker.js', {\n  workerData: { input: [4, 5, 6] },\n})\n\n// Option 3: Separate file, options, and metadata\nconst thread3 = new WorkerThread('./worker.js',\n  { workerData: { input: [7, 8, 9] } },\n  { id: 'worker-3' },\n)\n"})}),"\n",(0,t.jsx)(r.h3,{id:"getworker",children:"getWorker"}),"\n",(0,t.jsx)(r.p,{children:"Gets a promise that resolves to the Worker instance when it's initialized."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"async getWorker(): Promise<Worker>\n"})}),"\n",(0,t.jsx)(r.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(r.p,{children:"Promise that resolves to the Worker instance"}),"\n",(0,t.jsx)(r.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const thread = new WorkerThread('./worker.js')\nthread.start()\n\n// Get the worker instance when it's ready\nconst worker = await thread.getWorker()\n// Now we can use the worker directly if needed\n"})}),"\n",(0,t.jsx)(r.h3,{id:"start",children:"start"}),"\n",(0,t.jsx)(r.p,{children:"Starts the worker thread. Once started, the worker thread cannot be started again."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"start(): void\n"})}),"\n",(0,t.jsx)(r.h3,{id:"then",children:"then"}),"\n",(0,t.jsx)(r.p,{children:"Adds a callback to handle messages from the worker."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"then(onFulfilled: (value: any) => any): this\n"})}),"\n",(0,t.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"onFulfilled"}),": Function called with messages received from the worker"]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsx)(r.p,{children:"This instance for chaining"}),"\n",(0,t.jsx)(r.h4,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const thread = new WorkerThread('./worker.js')\n\nthread.then(result => {\n  console.log('Worker sent:', result)\n})\n\nthread.start()\n"})}),"\n",(0,t.jsx)(r.h3,{id:"catch",children:"catch"}),"\n",(0,t.jsx)(r.p,{children:"Adds a callback to handle errors from the worker."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"catch(onRejected: (error: any, type: 'error' | 'messageerror') => any): this\n"})}),"\n",(0,t.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"onRejected"}),": Function called when the worker encounters an error"]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsx)(r.p,{children:"This instance for chaining"}),"\n",(0,t.jsx)(r.h4,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const thread = new WorkerThread('./worker.js')\n\nthread.catch((error, type) => {\n  console.error(`Error type: ${type}`)\n  console.error(error)\n})\n\nthread.start()\n"})}),"\n",(0,t.jsx)(r.h3,{id:"finally",children:"finally"}),"\n",(0,t.jsx)(r.p,{children:"Adds a callback that will be called when the worker exits."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"finally(onFinally: (exitCode) => void): this\n"})}),"\n",(0,t.jsx)(r.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"onFinally"}),": Function called when the worker exits"]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsx)(r.p,{children:"This instance for chaining"}),"\n",(0,t.jsx)(r.h4,{id:"example-3",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const thread = new WorkerThread('./worker.js')\n\nthread.finally(exitCode => {\n  console.log(`Worker exited with code ${exitCode}`)\n  // Clean up resources, etc.\n})\n\nthread.start()\n"})}),"\n",(0,t.jsx)(r.h2,{id:"events",children:"Events"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"\nconst thread = new WorkerThread('./worker.js', {\n  workerData: { taskId: 123 },\n})\n\nthread.on('online', () => {\n  console.log('Worker is now executing')\n})\n\nthread.on('message', (result) => {\n  console.log('Worker sent result:', result)\n})\n\nthread.on('exit', (code) => {\n  console.log(`Worker exited with code ${code}`)\n})\n\n// Start the worker\nthread.start()\n"})}),"\n",(0,t.jsx)(r.h3,{id:"init",children:"init"}),"\n",(0,t.jsx)(r.p,{children:"When the thread is initialized"}),"\n",(0,t.jsx)(r.h3,{id:"online",children:"online"}),"\n",(0,t.jsx)(r.p,{children:"When the worker thread comes online"}),"\n",(0,t.jsx)(r.h3,{id:"message-1",children:"message"}),"\n",(0,t.jsx)(r.p,{children:"When a message is received from the worker"}),"\n",(0,t.jsx)(r.h3,{id:"messageerror",children:"messageerror"}),"\n",(0,t.jsx)(r.p,{children:"When there's an error deserializing a message"}),"\n",(0,t.jsx)(r.h3,{id:"error-1",children:"error"}),"\n",(0,t.jsx)(r.p,{children:"When the worker thread throws an error"}),"\n",(0,t.jsx)(r.h3,{id:"exit",children:"exit"}),"\n",(0,t.jsx)(r.p,{children:"When the worker thread exits"}),"\n",(0,t.jsx)(r.h3,{id:"status-1",children:"status"}),"\n",(0,t.jsx)(r.p,{children:"When the thread status changes"})]})}function c(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);
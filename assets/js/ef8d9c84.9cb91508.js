"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[922],{3331:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>l});var n=s(8101);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}},3345:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"api/core/thread-status","title":"ThreadStatus","description":"Tracks the state of a thread throughout its lifecycle using bitwise flags to efficiently represent and check multiple states. Provides convenient boolean accessors for checking specific states.","source":"@site/docs/api/core/thread-status.md","sourceDirName":"api/core","slug":"/api/core/thread-status","permalink":"/threadpool/docs/api/core/thread-status","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/threadpool/tree/master/docs/docs/api/core/thread-status.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Core API","permalink":"/threadpool/docs/category/core-api"},"next":{"title":"TaskPool","permalink":"/threadpool/docs/api/core/pool-status"}}');var a=s(5105),r=s(3331);const i={sidebar_position:1},l="ThreadStatus",c={},d=[{value:"Constants",id:"constants",level:2},{value:"Status",id:"status",level:3},{value:"Properties",id:"properties",level:2},{value:"value",id:"value",level:3},{value:"Get",id:"get",level:4},{value:"Set",id:"set",level:4},{value:"INIT",id:"init",level:3},{value:"READY",id:"ready",level:3},{value:"ACTIVE",id:"active",level:3},{value:"SUCCESS",id:"success",level:3},{value:"ERROR",id:"error",level:3},{value:"STARTED",id:"started",level:3},{value:"COMPLETED",id:"completed",level:3}];function o(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"threadstatus",children:"ThreadStatus"})}),"\n",(0,a.jsx)(t.p,{children:"Tracks the state of a thread throughout its lifecycle using bitwise flags to efficiently represent and check multiple states. Provides convenient boolean accessors for checking specific states."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const status = new ThreadStatus()\nstatus.value = Status.READY\n\n// Check if thread is ready\nif (status.READY) {\n  console.log('Thread is ready to start')\n}\n\n// Check if thread completed with an error\nif (status.ERROR) {\n  console.log('Thread encountered an error')\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"constants",children:"Constants"}),"\n",(0,a.jsx)(t.h3,{id:"status",children:"Status"}),"\n",(0,a.jsx)(t.p,{children:"Constants representing different thread states using bitwise flags. These values use bitwise flags to allow efficient checking of multiple states with a single operation. Each state is represented by a unique power of 2 to ensure clear bitwise operations."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const Status = {\n  INIT: 1,         // Initial state when thread is first created\n  READY: 2,        // Ready state when thread is prepared to run\n  ACTIVE: 4,       // Active state when thread is currently executing\n  SUCCESS: 8,      // Success state when thread has completed successfully\n  ERROR: 16,       // Error state when thread has encountered an error\n  COMPLETED: 24,   // Combined state for threads that have completed (SUCCESS | ERROR)\n  STARTED: 28,      // Combined state for threads that have started (ACTIVE | COMPLETED)\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(t.h3,{id:"value",children:"value"}),"\n",(0,a.jsx)(t.p,{children:"Gets or sets the current status value."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"get value(): number\nset value(state: number)\n"})}),"\n",(0,a.jsx)(t.h4,{id:"get",children:"Get"}),"\n",(0,a.jsx)(t.p,{children:"Returns the current status value."}),"\n",(0,a.jsx)(t.h4,{id:"set",children:"Set"}),"\n",(0,a.jsx)(t.p,{children:"Sets the current status value."}),"\n",(0,a.jsx)(t.p,{children:"Parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"state"}),": The new state value (typically from Status constants)"]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"init",children:"INIT"}),"\n",(0,a.jsx)(t.p,{children:"Whether the thread is in INIT state."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"get INIT(): boolean\n"})}),"\n",(0,a.jsx)(t.h3,{id:"ready",children:"READY"}),"\n",(0,a.jsx)(t.p,{children:"Whether the thread is in READY state."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"get READY(): boolean\n"})}),"\n",(0,a.jsx)(t.h3,{id:"active",children:"ACTIVE"}),"\n",(0,a.jsx)(t.p,{children:"Whether the thread is in ACTIVE state."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"get ACTIVE(): boolean\n"})}),"\n",(0,a.jsx)(t.h3,{id:"success",children:"SUCCESS"}),"\n",(0,a.jsx)(t.p,{children:"Whether the thread has completed successfully."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"get SUCCESS(): boolean\n"})}),"\n",(0,a.jsx)(t.h3,{id:"error",children:"ERROR"}),"\n",(0,a.jsx)(t.p,{children:"Whether the thread has completed with an error."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"get ERROR(): boolean\n"})}),"\n",(0,a.jsx)(t.h3,{id:"started",children:"STARTED"}),"\n",(0,a.jsx)(t.p,{children:"Whether the thread has started (is either ACTIVE or COMPLETED)."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"get STARTED(): boolean\n"})}),"\n",(0,a.jsx)(t.h3,{id:"completed",children:"COMPLETED"}),"\n",(0,a.jsx)(t.p,{children:"Whether the thread has completed (either SUCCESS or ERROR)."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"get COMPLETED(): boolean\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}}}]);
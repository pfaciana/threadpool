"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9431],{131:(e,t,n)=>{n.d(t,{A:()=>s});n(8101);var a=n(3526);const o={tabItem:"tabItem_w3dh"};var r=n(5105);function s(e){let{children:t,hidden:n,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,s),hidden:n,children:t})}},3331:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(8101);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}},6940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"examples/function/persistent-worker","title":"Persistent Workers","description":"Basic Independent Workers","source":"@site/docs/examples/function/persistent-worker.md","sourceDirName":"examples/function","slug":"/examples/function/persistent-worker","permalink":"/threadpool/docs/examples/function/persistent-worker","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/threadpool/tree/master/docs/docs/examples/function/persistent-worker.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Persistent Workers"},"sidebar":"tutorialSidebar","previous":{"title":"Multiple Workers","permalink":"/threadpool/docs/examples/function/pool"},"next":{"title":"Web Functions","permalink":"/threadpool/docs/category/web-functions"}}');var o=n(5105),r=n(3331),s=n(7647),i=n(131);const l={sidebar_position:3,title:"Persistent Workers"},c=void 0,d={},u=[{value:"Basic Independent Workers",id:"basic-independent-workers",level:2},{value:"Shared Worker Instances",id:"shared-worker-instances",level:2},{value:"Stateful Worker Chaining",id:"stateful-worker-chaining",level:2}];function m(e){const t={code:"code",h2:"h2",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"basic-independent-workers",children:"Basic Independent Workers"}),"\n",(0,o.jsxs)(s.A,{children:[(0,o.jsx)(i.A,{value:"typescript",label:"TypeScript",default:!0,children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { FunctionPool, importPersistentWorker, StatusType } from '@renderdev/threadpool/function'\nimport type * as mathType from './math.ts'\n\nconst startTime = performance.now()\n\nconst pool = (new FunctionPool())\n  .race((data, thread) => {\n    console.log(`Finished First: ${thread.meta} = ${data}\\n`)\n  })\n  .then((data, thread) => {\n    console.log(thread.meta, Array.isArray(data) ? data.length : data)\n  })\n  .allSettled(() => {\n    console.log('\\nDONE!', pool.status('completed', StatusType.COUNT))\n    const endTime = performance.now()\n    const elapsedTime = endTime - startTime\n    console.log('\\n\\nScript runtime: ' + (Math.round(elapsedTime) / 1000) + ' sec')\n  })\n\npool.addTask(async () => {\n  const mathA = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\n  const result = await mathA.fib(42)\n  mathA.terminate()\n  return result\n}, 'fib(42)')\n\npool.addTask(async () => {\n  const mathB = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\n  const result = await mathB.findPrimesUpTo(17000000)\n  mathB.terminate()\n  return result\n}, 'findPrimesUpTo(17000000)')\n\npool.addTask(async () => {\n  const mathC = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\n  const result = await mathC.tribonacci(32)\n  mathC.terminate()\n  return result\n}, 'tribonacci(32)')\n\npool.addTask(async () => {\n  const mathD = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\n  const result = await mathD.estimatePi(25)\n  mathD.terminate()\n  return result\n}, 'estimatePi(25)')\n"})})}),(0,o.jsx)(i.A,{value:"output",label:"Output",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Finished First: estimatePi(25) = 3.141592653589793\n\nfib(42) 267914296\ntribonacci(32) 45152016\nfindPrimesUpTo(17000000) 1091314\nestimatePi(25) 3.141592653589793\n\nDONE! 4\n\n\nScript runtime: 5.537 sec\n"})})})]}),"\n",(0,o.jsx)(t.h2,{id:"shared-worker-instances",children:"Shared Worker Instances"}),"\n",(0,o.jsxs)(s.A,{children:[(0,o.jsx)(i.A,{value:"typescript",label:"TypeScript",default:!0,children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { FunctionPool, importPersistentWorker, StatusType } from '@renderdev/threadpool/functions'\nimport type * as mathType from './math.ts'\n\nconst startTime = performance.now()\n\nconst mathB = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\n\nconst pool = (new FunctionPool())\n  .race((data, thread) => {\n    console.log(`Finished First: ${thread.meta} = ${Array.isArray(data) ? data.length : data}\\n`)\n  })\n  .then((data, thread) => {\n    console.log(thread.meta, Array.isArray(data) ? data.length : data)\n    if (thread.meta === 'findPrimesUpTo(17000000)') {\n      mathB.terminate()\n    }\n  })\n  .allSettled(() => {\n    console.log('\\nDONE!', pool.status('completed', StatusType.COUNT))\n    const endTime = performance.now()\n    const elapsedTime = endTime - startTime\n    console.log('\\n\\nScript runtime: ' + (Math.round(elapsedTime) / 1000) + ' sec')\n  })\n\npool.addTask(async () => {\n  const mathA = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\n  const result = await mathA.fib(42)\n  // Do more stuff here\n  mathA.terminate() // terminate to close the port when done\n  return result\n}, 'fib(42)')\n\npool.addTask(async () => {\n  const result = await mathB.findPrimesUpTo(17000000)\n  // Do more stuff here\n  // We are leaving the port open for now, and closing it in the allSettled callback\n  return result\n}, 'findPrimesUpTo(17000000)')\n\npool.addTask(async () => {\n  const mathC = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\n  const result = await mathC.tribonacci(32)\n  // Do more stuff here\n  mathC.terminate() // terminate to close the port when done\n  return result\n}, 'tribonacci(32)')\n\nconst mathD = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\npool.addTask(async () => {\n  const result1 = await mathD.estimatePi(25)\n  const result2 = await mathD.estimatePi(25)\n  // Do more stuff here\n  return result1 + result2\n}, 'estimatePi(25)').then((data) => {\n  pool.addTask(async () => {\n    const result3 = await mathD.estimatePi(25)\n    mathD.terminate() // terminate to close the port when done\n    return result3 + data\n  }, 'estimatePi(25) #2')\n})\n"})})}),(0,o.jsx)(i.A,{value:"output",label:"Output",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Finished First: findPrimesUpTo(17000000) = 1091314\n\nfindPrimesUpTo(17000000) 1091314\ntribonacci(32) 45152016\nfib(42) 267914296\nestimatePi(25) 6.283185307179574\nestimatePi(25) #2 9.424777960769362\n\nDONE! 5\n\n\nScript runtime: 2.993 sec\n"})})})]}),"\n",(0,o.jsx)(t.h2,{id:"stateful-worker-chaining",children:"Stateful Worker Chaining"}),"\n",(0,o.jsxs)(s.A,{children:[(0,o.jsx)(i.A,{value:"typescript",label:"TypeScript",default:!0,children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { setTimeout } from 'node:timers'\nimport { importPersistentWorker, FunctionPool, StatusType } from '@renderdev/threadpool/function'\nimport type * as mathType from './math.ts'\n\nconst start = performance.now()\n\nconst pool = (new FunctionPool({ poolSize: 3 }))\n  .allSettled(() => {\n    const completed = pool.status('completed', StatusType.RAW)\n\n    for (const thread of completed) {\n      console.log(thread.message, thread.status.SUCCESS ? 'Success' : 'Error', thread.meta)\n    }\n\n    console.log('\\nDONE!', pool.status('completed', StatusType.COUNT))\n    console.log('\\n\\nScript runtime: ' + (Math.round(performance.now() - start) / 1000) + ' sec\\n\\n')\n  })\n\nconsole.log('Available Thread: ', pool.hasAvailableThread() ? 'Yes' : 'No')\n\npool.addTask(async () => {\n  const math = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\n  console.log('A: getState(): ', await math.state())\n  console.log('A: add(1, 2): ', await math.add(1, 2))\n  console.log('A: getState(1, 2): ', await math.state())\n  console.log('A: add(3, 4): ', await math.add(3, 4))\n  console.log('A: getState(3, 4): ', await math.state())\n  console.log('A: fib(): ', await math.fib(42))\n  math.terminate()\n  console.log(pool.status('completed', StatusType.PERCENT), `%`)\n  return 'Done A!'\n}, { meta: 1 })\n\nconst mathB = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\npool.addTask(async () => {\n  console.log('B: getState(): ', await mathB.state())\n  console.log('B: add(5, 6): ', await mathB.add(5, 6))\n  console.log('B: getState(5, 6): ', await mathB.state())\n  console.log('B: add(7, 8): ', await mathB.add(7, 8))\n  console.log('B: getState(7, 8): ', await mathB.state())\n  console.log('B: fib(): ', await mathB.fib(41))\n  console.log(pool.status('completed', StatusType.PERCENT), `%`)\n  return 'Done B!'\n}).on('exit', () => {\n  pool.addTask(async () => {\n    console.log('B2: getState(): ', await mathB.state())\n    console.log('B2: add(15, 16): ', await mathB.add(15, 16))\n    console.log('B2: getState(15, 16): ', await mathB.state())\n    console.log('B2: add(17, 18): ', await mathB.add(17, 18))\n    console.log('B2: getState(17, 18): ', await mathB.state())\n    console.log('B2: fib(): ', await mathB.fib(39))\n    mathB.terminate()\n    console.log(pool.status('completed', StatusType.PERCENT), `%`)\n    return 'Done B2!'\n  })\n})\n\npool.addTask(async () => {\n  const math = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\n  console.log('C: getState(): ', await math.state())\n  console.log('C: add(9, 10): ', await math.add(9, 10))\n  console.log('C: getState(9, 10): ', await math.state())\n  console.log('C: add(11, 12): ', await math.add(11, 12))\n  console.log('C: getState(11, 12): ', await math.state())\n  console.log('C: fib(): ', await math.fib(40))\n  math.terminate()\n  console.log(pool.status('completed', StatusType.PERCENT), `%`)\n  return 'Done C!'\n})\n\nconsole.log('Available Thread: ', pool.hasAvailableThread() ? 'Yes' : 'No')\n\nsetTimeout(() => {\n  pool.addTask(async () => {\n    return new Promise((resolve) => {\n      setTimeout(async () => {\n        const math = await importPersistentWorker<typeof mathType>(new URL('./math.ts', import.meta.url))\n        console.log('C2: getState(): ', await math.state())\n        console.log('C2: add(19, 110): ', await math.add(19, 110))\n        console.log('C2: getState(19, 110): ', await math.state())\n        console.log('C2: add(111, 112): ', await math.add(111, 112))\n        console.log('C2: getState(111, 112): ', await math.state())\n        console.log('C2: fib(): ', await math.fib(40))\n        math.terminate()\n        console.log(pool.status('completed', StatusType.PERCENT), `%`)\n        resolve('Done C2!')\n      }, 2000)\n    })\n  })\n}, 2000)\n"})})}),(0,o.jsx)(i.A,{value:"output",label:"Output",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Available Thread:  Yes\nAvailable Thread:  No\nB: getState():  0\nB: add(5, 6):  11\nB: getState(5, 6):  1\nB: add(7, 8):  15\nB: getState(7, 8):  2\nA: getState():  0\nA: add(1, 2):  3\nA: getState(1, 2):  1\nA: add(3, 4):  7\nA: getState(3, 4):  2\nC: getState():  0\nC: add(9, 10):  19\nC: getState(9, 10):  1\nC: add(11, 12):  23\nC: getState(11, 12):  2\nC: fib():  102334155\n0 %\nB: fib():  165580141\n33.333 %\nB2: getState():  2\nB2: add(15, 16):  31\nB2: getState(15, 16):  3\nB2: add(17, 18):  35\nB2: getState(17, 18):  4\nB2: fib():  63245986\n50 %\nA: fib():  267914296\n75 %\nDone C! Success undefined\nDone B! Success undefined\nDone B2! Success undefined\nDone A! Success { meta: 1 }\n\nDONE! 4\n\n\nScript runtime: 1.842 sec\n\n\nC2: getState():  0\nC2: add(19, 110):  129\nC2: getState(19, 110):  1\nC2: add(111, 112):  223\nC2: getState(111, 112):  2\nC2: fib():  102334155\n80 %\nDone C! Success undefined\nDone B! Success undefined\nDone B2! Success undefined\nDone A! Success { meta: 1 }\nDone C2! Success undefined\n\nDONE! 5\n\n\nScript runtime: 4.76 sec\n"})})})]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},7647:(e,t,n)=>{n.d(t,{A:()=>v});var a=n(8101),o=n(3526),r=n(5093),s=n(5234),i=n(2569),l=n(1390),c=n(7775),d=n(7623);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const o=(0,s.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=m(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[c,u]=h({queryString:n,groupId:o}),[f,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,d.Dv)(n);return[o,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),w=(()=>{const e=c??f;return p({value:e,tabValues:r})?e:null})();(0,i.A)((()=>{w&&l(w)}),[w]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,r]),tabValues:r}}var g=n(3547);const w={tabList:"tabList_NQRc",tabItem:"tabItem_cMRk"};var b=n(5105);function y(e){let{className:t,block:n,selectedValue:a,selectValue:s,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),o=i[n].value;o!==a&&(c(t),s(o))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...r,className:(0,o.A)("tabs__item",w.tabItem,r?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function T(e){let{lazy:t,children:n,selectedValue:r}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function S(e){const t=f(e);return(0,b.jsxs)("div",{className:(0,o.A)("tabs-container",w.tabList),children:[(0,b.jsx)(y,{...t,...e}),(0,b.jsx)(T,{...t,...e})]})}function v(e){const t=(0,g.A)();return(0,b.jsx)(S,{...e,children:u(e.children)},String(t))}}}]);
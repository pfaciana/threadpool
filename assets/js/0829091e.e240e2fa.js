"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6679],{131:(e,t,n)=>{n.d(t,{A:()=>r});n(8101);var a=n(3526);const o={tabItem:"tabItem_w3dh"};var s=n(5105);function r(e){let{children:t,hidden:n,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,r),hidden:n,children:t})}},3331:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var a=n(8101);const o={},s=a.createContext(o);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:t},e.children)}},7647:(e,t,n)=>{n.d(t,{A:()=>B});var a=n(8101),o=n(3526),s=n(5093),r=n(5234),l=n(2569),c=n(1390),i=n(7775),d=n(7623);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}(n);return function(e){const t=(0,i.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const o=(0,r.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(o.location.search);t.set(s,e),o.replace({...o.location,search:t.toString()})}),[s,o])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,s=h(e),[r,c]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[i,u]=m({queryString:n,groupId:o}),[b,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,s]=(0,d.Dv)(n);return[o,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:o}),S=(()=>{const e=i??b;return p({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{S&&c(S)}),[S]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),g(e)}),[u,g,s]),tabValues:s}}var g=n(3547);const S={tabList:"tabList_NQRc",tabItem:"tabItem_cMRk"};var f=n(5105);function w(e){let{className:t,block:n,selectedValue:a,selectValue:r,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:i}=(0,s.a_)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),o=l[n].value;o!==a&&(i(t),r(o))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>{c.push(e)},onKeyDown:u,onClick:d,...s,className:(0,o.A)("tabs__item",S.tabItem,s?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function k(e){let{lazy:t,children:n,selectedValue:s}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function x(e){const t=b(e);return(0,f.jsxs)("div",{className:(0,o.A)("tabs-container",S.tabList),children:[(0,f.jsx)(w,{...t,...e}),(0,f.jsx)(k,{...t,...e})]})}function B(e){const t=(0,g.A)();return(0,f.jsx)(x,{...e,children:u(e.children)},String(t))}},7779:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"examples/web/web-examples","title":"Web Worker Examples","description":"This section demonstrates how to use @renderdev/threadpool in web browser environments. These examples showcase how to leverage ThreadPool\'s API for both dedicated and shared Web Workers.","source":"@site/docs/examples/web/web-examples.md","sourceDirName":"examples/web","slug":"/examples/web/web-examples","permalink":"/threadpool/docs/examples/web/web-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/threadpool/tree/master/docs/docs/examples/web/web-examples.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Web Workers"},"sidebar":"tutorialSidebar","previous":{"title":"Web Functions","permalink":"/threadpool/docs/category/web-functions"}}');var o=n(5105),s=n(3331),r=n(7647),l=n(131);const c={sidebar_position:3,sidebar_label:"Web Workers"},i="Web Worker Examples",d={},u=[{value:"Reference Files",id:"reference-files",level:2},{value:"Dedicated Web Workers",id:"dedicated-web-workers",level:2},{value:"Basic Dedicated Workers",id:"basic-dedicated-workers",level:3},{value:"Persistent Dedicated Workers",id:"persistent-dedicated-workers",level:3},{value:"Using Shared Web Workers",id:"using-shared-web-workers",level:2},{value:"Basic Shared Workers Example",id:"basic-shared-workers-example",level:3},{value:"Persistent Shared Web Workers",id:"persistent-shared-web-workers",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"web-worker-examples",children:"Web Worker Examples"})}),"\n",(0,o.jsxs)(t.p,{children:["This section demonstrates how to use ",(0,o.jsx)(t.code,{children:"@renderdev/threadpool"})," in web browser environments. These examples showcase how to leverage ThreadPool's API for both dedicated and shared Web Workers."]}),"\n",(0,o.jsx)(t.h2,{id:"reference-files",children:"Reference Files"}),"\n",(0,o.jsx)(t.p,{children:"The following code examples will build upon these files."}),"\n",(0,o.jsxs)(r.A,{groupId:"common-files",children:[(0,o.jsx)(l.A,{value:"html",label:"HTML Setup",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-html",children:'<!doctype html>\n<html>\n<head>\n  <title>Web Workers</title>\n  <script src="thread-pool.js" type="module" defer><\/script>\n</head>\n<body>\n  <h1>Browser Web Workers Example</h1>\n</body>\n</html>\n'})})}),(0,o.jsxs)(l.A,{value:"base",label:"Import Module",children:[(0,o.jsx)(t.p,{children:"A series of CPU intensive math functions and a state counter for persistent workers."}),(0,o.jsxs)(t.admonition,{type:"info",children:[(0,o.jsxs)(t.p,{children:["Code for this module can be found in the ",(0,o.jsx)(t.a,{href:"/threadpool/docs/examples/math-module",children:"Base Module"})," documentation page."]}),(0,o.jsx)(t.p,{children:"It is the same Base Module we use throughout all the examples."})]})]})]}),"\n",(0,o.jsx)(t.h2,{id:"dedicated-web-workers",children:"Dedicated Web Workers"}),"\n",(0,o.jsx)(t.p,{children:"Dedicated Web Workers are the most common type of web worker, providing an isolated thread for executing JavaScript that's tied to a single context."}),"\n",(0,o.jsx)(t.h3,{id:"basic-dedicated-workers",children:"Basic Dedicated Workers"}),"\n","\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(l.A,{value:"ts",label:"TypeScript",default:!0,children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { StatusType, WebFunctionPool, importWebWorker, importTaskWebWorker } from '@renderdev/threadpool/web'\nimport type * as mathType from './math.ts'\n\nconst start = performance.now()\n\nconsole.log(`Number of Treads: ${navigator.hardwareConcurrency}`)\nconsole.log(`Starting...\\n`)\n\nconst pool = (new WebFunctionPool())\n  .allSettled(() => {\n    const completed = pool.status('completed', StatusType.RAW)\n\n    for (const thread of completed) {\n      console.log(thread.message, thread.status.SUCCESS ? 'Success' : 'Error', thread.meta)\n    }\n\n    console.log('\\nDONE!', pool.status('completed', StatusType.COUNT))\n    console.log('\\n\\nScript runtime: ' + (Math.round(performance.now() - start) / 1000) + ' sec\\n\\n')\n  })\n\nconst filename = new URL('./math.js', import.meta.url)\nconst { add, getState } = await importWebWorker<typeof mathType>(filename)\nconst { fib, state } = await importTaskWebWorker<typeof mathType>(filename)\n\nlet threads = Array.from({ length: 10 })\nfor (const i in threads) {\n  pool.addTask(fib(42), +i + 1)\n}\npool.addTask(() => getState(), 11)\npool.addTask(() => add(1, 2), 12)\npool.addTask(() => getState(), 13)\npool.addTask(() => add(34, 56), 14)\npool.addTask(() => getState(), 15)\npool.addTask(state(), 16)\n"})})}),(0,o.jsx)(l.A,{value:"output",label:"Output",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Number of Treads: 16\nStarting...\n\n267914296 'Success' 1\n267914296 'Success' 5\n267914296 'Success' 3\n267914296 'Success' 6\n267914296 'Success' 2\n267914296 'Success' 7\n267914296 'Success' 4\n0 'Success' 11\n3 'Success' 12\n0 'Success' 13\n90 'Success' 14\n0 'Success' 16\n0 'Success' 15\n267914296 'Success' 9\n267914296 'Success' 10\n267914296 'Success' 8\n\nDONE! 16\n\nScript runtime: 1.919 sec\n"})})})]}),"\n",(0,o.jsxs)(t.admonition,{type:"tip",children:[(0,o.jsxs)(t.p,{children:["This code highlights the difference between ",(0,o.jsx)(t.code,{children:"importWebWorker"})," and ",(0,o.jsx)(t.code,{children:"importTaskWebWorker"}),".\nThey do the same thing, except ",(0,o.jsx)(t.code,{children:"importTaskWebWorker"}),' will "promisify" the callback.\nThis allows us to directly pass the response as a task for a ',(0,o.jsx)(t.code,{children:"WebFunctionPool"}),".\nIn other words, its syntactic sugar to make the code easier to write and read when dealing with tasks."]}),(0,o.jsx)(t.p,{children:"Type checking will still work in both instances."})]}),"\n",(0,o.jsx)(t.h3,{id:"persistent-dedicated-workers",children:"Persistent Dedicated Workers"}),"\n",(0,o.jsx)(t.p,{children:"You can create multiple persistent dedicated workers and use them in parallel:"}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(l.A,{value:"ts",label:"TypeScript",default:!0,children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { StatusType, WebFunctionPool, importPersistentWebWorker } from '@renderdev/threadpool/web'\nimport type * as mathType from './math.ts'\n\nconst start = performance.now()\n\nconsole.log(`Number of Treads: ${navigator.hardwareConcurrency}`)\nconsole.log(`Starting...\\n`)\n\nconst filename = new URL('./math.js', import.meta.url)\n\nconst mathB = await importPersistentWebWorker<typeof mathType>(filename)\n\nconst pool = new WebFunctionPool()\npool.allSettled(() => {\n  const completed = pool.status('completed', StatusType.RAW)\n  for (const thread of completed) {\n    console.log(thread.message, thread.status.SUCCESS ? 'Success' : 'Error', thread.meta)\n    if (thread.meta === 'B2') {\n      mathB.terminate()\n    }\n  }\n\n  console.log('\\nDONE!', pool.status('completed', StatusType.COUNT))\n  console.log('\\n\\nScript runtime: ' + (Math.round(performance.now() - start) / 1000) + ' sec\\n\\n')\n})\n\npool.addTask(async () => {\n  const math = await importPersistentWebWorker<typeof mathType>(filename)\n  console.log('A: getState(): ', await math.state())\n  console.log('A: add(1, 2): ', await math.add(1, 2))\n  console.log('A: getState(1, 2): ', await math.state())\n  console.log('A: add(3, 4): ', await math.add(3, 4))\n  console.log('A: getState(3, 4): ', await math.state())\n  console.log('A: fib(): ', await math.fib(42))\n  math.terminate()\n  return 'Done A!'\n}, 'A')\n\npool.addTask(async () => {\n  console.log('B: getState(): ', await mathB.state())\n  console.log('B: add(5, 6): ', await mathB.add(5, 6))\n  console.log('B: getState(5, 6): ', await mathB.state())\n  console.log('B: add(7, 8): ', await mathB.add(7, 8))\n  console.log('B: getState(7, 8): ', await mathB.state())\n  console.log('B: fib(): ', await mathB.fib(41))\n  return 'Done B!'\n}, 'B')\n\npool.addTask(async () => {\n  const math = await importPersistentWebWorker<typeof mathType>(filename)\n  console.log('C: getState(): ', await math.state())\n  console.log('C: add(9, 10): ', await math.add(9, 10))\n  console.log('C: getState(9, 10): ', await math.state())\n  console.log('C: add(11, 12): ', await math.add(11, 12))\n  console.log('C: getState(11, 12): ', await math.state())\n  console.log('C: fib(): ', await math.fib(40))\n  math.terminate()\n  return 'Done C!'\n}, 'C')\n\nsetTimeout(() => {\n  pool.addTask(async () => {\n    console.log('B2: getState(): ', await mathB.state())\n    console.log('B2: add(5, 6): ', await mathB.add(5, 6))\n    console.log('B2: getState(5, 6): ', await mathB.state())\n    console.log('B2: add(7, 8): ', await mathB.add(7, 8))\n    console.log('B2: getState(7, 8): ', await mathB.state())\n    console.log('B2: fib(): ', await mathB.fib(41))\n    return 'Done B2!'\n  }, 'B2')\n}, 2000)\n"})})}),(0,o.jsx)(l.A,{value:"output",label:"Output",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Number of Treads: 16\nStarting...\n\nB: getState():  0\nA: getState():  0\nB: add(5, 6):  11\nA: add(1, 2):  3\nB: getState(5, 6):  1\nA: getState(1, 2):  1\nB: add(7, 8):  15\nA: add(3, 4):  7\nB: getState(7, 8):  2\nA: getState(3, 4):  2\nC: getState():  0\nC: add(9, 10):  19\nC: getState(9, 10):  1\nC: add(11, 12):  23\nC: getState(11, 12):  2\nC: fib():  102334155\nB: fib():  165580141\nA: fib():  267914296\nDone C! Success C\nDone B! Success B\nDone A! Success A\n\nDONE! 3\n\nScript runtime: 1.997 sec\n\nB2: getState():  2\nB2: add(5, 6):  11\nB2: getState(5, 6):  3\nB2: add(7, 8):  15\nB2: getState(7, 8):  4\nB2: fib():  165580141\nDone C! Success C\nDone B! Success B\nDone A! Success A\nDone B2! Success B2\n\nDONE! 4\n\nScript runtime: 3.166 sec\n"})})})]}),"\n",(0,o.jsx)(t.h2,{id:"using-shared-web-workers",children:"Using Shared Web Workers"}),"\n",(0,o.jsx)(t.p,{children:"Shared Web Workers can be accessed from multiple browser contexts like windows, tabs, or iframes, allowing for communication between different parts of your application."}),"\n",(0,o.jsx)(t.h3,{id:"basic-shared-workers-example",children:"Basic Shared Workers Example"}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsxs)(l.A,{value:"ts",label:"TypeScript",default:!0,children:[(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { StatusType, WebFunctionPool, importWebWorker, importTaskWebWorker } from '@renderdev/threadpool/web'\nimport type * as mathType from './math.ts'\n\nconst start = performance.now()\n\nconsole.log(`Number of Treads: ${navigator.hardwareConcurrency}`)\nconsole.log(`Starting...\\n`)\n\nconst filename = new URL('./math.js', import.meta.url)\nconst WorkerOptions = { type: 'module', credentials: 'same-origin' }\n\nconst pool = new WebFunctionPool()\npool.allSettled(() => {\n  const completed = pool.status('completed', StatusType.RAW)\n\n  for (const thread of completed) {\n    console.log(thread.message, thread.status.SUCCESS ? 'Success' : 'Error', thread.meta)\n  }\n\n  console.log('\\nDONE!', pool.status('completed', StatusType.COUNT))\n  console.log('\\n\\nScript runtime: ' + (Math.round(performance.now() - start) / 1000) + ' sec\\n\\n')\n})\n\nconst { add, getState } = await importWebWorker<typeof mathType>(filename)\nconst { fib, state } = await importTaskWebWorker<typeof mathType>(filename)\n\nlet threads = Array.from({ length: 10 })\nfor (const i in threads) {\n  pool.addTask(fib(42), +i + 1)\n}\npool.addTask(() => getState(), 11)\npool.addTask(() => add(1, 2), 12)\npool.addTask(() => getState(), 13)\npool.addTask(() => add(34, 56), 14)\npool.addTask(() => getState(), 15)\npool.addTask(state(), 16)\n"})}),(0,o.jsxs)(t.admonition,{type:"tip",children:[(0,o.jsxs)(t.p,{children:["This code highlights the difference between ",(0,o.jsx)(t.code,{children:"importWebWorker"})," and ",(0,o.jsx)(t.code,{children:"importTaskWebWorker"}),".\nThey do the same thing, except ",(0,o.jsx)(t.code,{children:"importTaskWebWorker"}),' will "promisify" the callback.\nThis allows us to directly pass the response as a task for a ',(0,o.jsx)(t.code,{children:"WebFunctionPool"}),".\nIn other words, its syntactic sugar to make the code easier to write and read when dealing with tasks."]}),(0,o.jsx)(t.p,{children:"Type checking will still work in both instances."})]})]}),(0,o.jsx)(l.A,{value:"output-1",label:"Output Tab #1",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Number of Treads: 16\nStarting...\n\n267914296 'Success' 3\n267914296 'Success' 5\n267914296 'Success' 4\n267914296 'Success' 1\n267914296 'Success' 6\n267914296 'Success' 7\n267914296 'Success' 2\n0 'Success' 15\n0 'Success' 11\n3 'Success' 12\n1 'Success' 13\n90 'Success' 14\n2 'Success' 16\n267914296 'Success' 8\n267914296 'Success' 10\n267914296 'Success' 9\n\nDONE! 16\n\nScript runtime: 3.768 sec\n"})})}),(0,o.jsx)(l.A,{value:"output-2",label:"Output Tab #2",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Number of Treads: 16\nStarting...\n\n267914296 'Success' 5\n267914296 'Success' 3\n267914296 'Success' 10\n267914296 'Success' 8\n267914296 'Success' 2\n267914296 'Success' 4\n267914296 'Success' 9\n0 'Success' 11\n0 'Success' 15\n3 'Success' 12\n267914296 'Success' 6\n3 'Success' 13\n267914296 'Success' 7\n90 'Success' 14\n4 'Success' 16\n267914296 'Success' 1\n\nDONE! 16\n\nScript runtime: 3.768 sec\n"})})})]}),"\n",(0,o.jsx)(t.admonition,{type:"warning",children:(0,o.jsx)(t.p,{children:"Shared Web Workers are not supported in all browsers. Make sure to check compatibility or provide a fallback to dedicated workers."})}),"\n",(0,o.jsx)(t.h3,{id:"persistent-shared-web-workers",children:"Persistent Shared Web Workers"}),"\n",(0,o.jsx)(t.p,{children:"For scenarios where you want to maintain shared state across multiple browser contexts:"}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(l.A,{value:"ts",label:"TypeScript",default:!0,children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { StatusType, WebFunctionPool, importPersistentWebWorker } from '@renderdev/threadpool/web'\nimport type * as mathType from './math.ts'\n\nconst start = performance.now()\n\nconsole.log(`Number of Treads: ${navigator.hardwareConcurrency}`)\nconsole.log(`Starting...\\n`)\n\nconst filename = new URL('./math.js', import.meta.url)\nconst WorkerOptions = { type: 'module', credentials: 'same-origin' }\n\nconst mathB = await importPersistentWebWorker<typeof mathType>(filename, WorkerOptions, { WorkerType: SharedWorker })\n\nconst pool = new WebFunctionPool()\npool.allSettled(() => {\n  const completed = pool.status('completed', StatusType.RAW)\n  for (const thread of completed) {\n    console.log(thread.message, thread.status.SUCCESS ? 'Success' : 'Error', thread.meta)\n    if (thread.meta === 'B2') {\n      mathB.terminate()\n    }\n  }\n\n  console.log('\\nDONE!', pool.status('completed', StatusType.COUNT))\n  console.log('\\n\\nScript runtime: ' + (Math.round(performance.now() - start) / 1000) + ' sec\\n\\n')\n})\n\npool.addTask(async () => {\n  const math = await importPersistentWebWorker<typeof mathType>(filename, WorkerOptions, { WorkerType: SharedWorker })\n  console.log('A: getState(): ', await math.state())\n  console.log('A: add(1, 2): ', await math.add(1, 2))\n  console.log('A: getState(1, 2): ', await math.state())\n  console.log('A: add(3, 4): ', await math.add(3, 4))\n  console.log('A: getState(3, 4): ', await math.state())\n  console.log('A: fib(): ', await math.fib(42))\n  math.terminate()\n  return 'Done A!'\n}, 'A')\n\npool.addTask(async () => {\n  console.log('B: getState(): ', await mathB.state())\n  console.log('B: add(5, 6): ', await mathB.add(5, 6))\n  console.log('B: getState(5, 6): ', await mathB.state())\n  console.log('B: add(7, 8): ', await mathB.add(7, 8))\n  console.log('B: getState(7, 8): ', await mathB.state())\n  console.log('B: fib(): ', await mathB.fib(41))\n  return 'Done B!'\n}, 'B')\n\npool.addTask(async () => {\n  const math = await importPersistentWebWorker<typeof mathType>(filename, WorkerOptions, { WorkerType: SharedWorker })\n  console.log('C: getState(): ', await math.state())\n  console.log('C: add(9, 10): ', await math.add(9, 10))\n  console.log('C: getState(9, 10): ', await math.state())\n  console.log('C: add(11, 12): ', await math.add(11, 12))\n  console.log('C: getState(11, 12): ', await math.state())\n  console.log('C: fib(): ', await math.fib(40))\n  math.terminate()\n  return 'Done C!'\n}, 'C')\n\nsetTimeout(() => {\n  pool.addTask(async () => {\n    console.log('B2: getState(): ', await mathB.state())\n    console.log('B2: add(5, 6): ', await mathB.add(5, 6))\n    console.log('B2: getState(5, 6): ', await mathB.state())\n    console.log('B2: add(7, 8): ', await mathB.add(7, 8))\n    console.log('B2: getState(7, 8): ', await mathB.state())\n    console.log('B2: fib(): ', await mathB.fib(41))\n    return 'Done B2!'\n  }, 'B2')\n}, 4000)\n"})})}),(0,o.jsx)(l.A,{value:"output-1",label:"Output Tab #1",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Number of Treads: 16\nStarting...\n\nC: getState():  0\nB: getState():  0\nA: getState():  0\nC: add(9, 10):  19\nB: add(5, 6):  11\nA: add(1, 2):  3\nC: getState(9, 10):  3\nB: getState(5, 6):  3\nA: getState(1, 2):  3\nC: add(11, 12):  23\nB: add(7, 8):  15\nA: add(3, 4):  7\nC: getState(11, 12):  6\nB: getState(7, 8):  6\nA: getState(3, 4):  6\nC: fib():  102334155\nB: fib():  165580141\nA: fib():  267914296\nDone C! Success C\nDone B! Success B\nDone A! Success A\n\nDONE! 3\n\nScript runtime: 3.526 sec\n\nB2: getState():  6\nB2: add(5, 6):  11\nB2: getState(5, 6):  7\nB2: add(7, 8):  15\nB2: getState(7, 8):  8\nB2: fib():  165580141\nDone C! Success C\nDone B! Success B\nDone A! Success A\nDone B2! Success B2\n\nDONE! 4\n\nScript runtime: 5.112 sec\n"})})}),(0,o.jsx)(l.A,{value:"output-2",label:"Output Tab #2",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Number of Treads: 16\nStarting...\n\nC: getState():  8\nB: getState():  8\nA: getState():  8\nC: add(9, 10):  19\nC: getState(9, 10):  9\nB: add(5, 6):  11\nB: getState(5, 6):  10\nA: getState(1, 2):  10\nA: add(1, 2):  3\nC: add(11, 12):  23\nB: add(7, 8):  15\nA: add(3, 4):  7\nC: getState(11, 12):  14\nB: getState(7, 8):  14\nA: getState(3, 4):  14\nC: fib():  102334155\nB: fib():  165580141\nA: fib():  267914296\nDone A! Success A\nDone C! Success C\nDone B! Success B\n\nDONE! 3\n\nScript runtime: 3.578 sec\n\nB2: getState():  14\nB2: add(5, 6):  11\nB2: getState(5, 6):  15\nB2: add(7, 8):  15\nB2: getState(7, 8):  16\nB2: fib():  165580141\nDone B! Success B\nDone A! Success A\nDone C! Success C\nDone B2! Success B2\n\nDONE! 4\n\nScript runtime: 5.124 sec\n"})})})]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsx)(t.p,{children:"With Shared Web Workers, the state is shared across all connections. When one task updates the state, all other connections will see the updated value."})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);
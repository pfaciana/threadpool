"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4827],{3331:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>t});var l=n(8101);const s={},a=l.createContext(s);function o(e){const r=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),l.createElement(a.Provider,{value:r},e.children)}},4055:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"api/node/worker-pool","title":"WorkerPool","description":"Manages a pool of worker threads for parallel execution. WorkerPool provides a high-level API for managing multiple worker threads in Node.js, automatically handling queuing, execution, and resource monitoring. It offers Promise-like APIs and combinators for working with multiple concurrent worker tasks.","source":"@site/docs/api/node/worker-pool.md","sourceDirName":"api/node","slug":"/api/node/worker-pool","permalink":"/threadpool/docs/api/node/worker-pool","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/threadpool/tree/master/docs/docs/api/node/worker-pool.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"WorkerThread","permalink":"/threadpool/docs/api/node/worker-thread"},"next":{"title":"Worker","permalink":"/threadpool/docs/api/node/worker"}}');var s=n(5105),a=n(3331);const o={sidebar_position:2},t="WorkerPool",i={},d=[{value:"Types",id:"types",level:2},{value:"SystemInfo",id:"systeminfo",level:3},{value:"WorkerPoolOptions",id:"workerpooloptions",level:3},{value:"Properties",id:"properties",level:2},{value:"system",id:"system",level:3},{value:"Example",id:"example",level:4},{value:"maxThreadThreshold",id:"maxthreadthreshold",level:3},{value:"poolSize",id:"poolsize",level:3},{value:"Set",id:"set",level:4},{value:"Get",id:"get",level:4},{value:"pingInterval",id:"pinginterval",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Examples",id:"examples",level:4},{value:"status",id:"status",level:3},{value:"isCompleted",id:"iscompleted",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns",level:4},{value:"hasAvailableThread",id:"hasavailablethread",level:3},{value:"Returns",id:"returns-1",level:4},{value:"enableExitEventFallback",id:"enableexiteventfallback",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Example",id:"example-1",level:4},{value:"addWorker",id:"addworker",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"addTask",id:"addtask",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"then",id:"then",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Example",id:"example-4",level:4},{value:"catch",id:"catch",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Example",id:"example-5",level:4},{value:"finally",id:"finally",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Example",id:"example-6",level:4},{value:"allSettled",id:"allsettled",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Example",id:"example-7",level:4},{value:"all",id:"all",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Example",id:"example-8",level:4},{value:"any",id:"any",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Example",id:"example-9",level:4},{value:"race",id:"race",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Example",id:"example-10",level:4},{value:"Events",id:"events",level:2},{value:"worker.init",id:"workerinit",level:3},{value:"worker.online",id:"workeronline",level:3},{value:"worker.message",id:"workermessage",level:3},{value:"worker.error",id:"workererror",level:3},{value:"worker.messageerror",id:"workermessageerror",level:3},{value:"worker.exit",id:"workerexit",level:3},{value:"worker.status",id:"workerstatus",level:3},{value:"complete",id:"complete",level:3}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"workerpool",children:"WorkerPool"})}),"\n",(0,s.jsx)(r.p,{children:"Manages a pool of worker threads for parallel execution. WorkerPool provides a high-level API for managing multiple worker threads in Node.js, automatically handling queuing, execution, and resource monitoring. It offers Promise-like APIs and combinators for working with multiple concurrent worker tasks."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"// Create a pool with default settings\nconst pool = new WorkerPool('./worker.js', {\n  workerData: { taskId: 0, data: [1, 2, 3] },\n})\n\n// Add several workers with different task data\npool.addTask({ taskId: 1, data: [4, 5, 6] })\npool.addTask({ taskId: 2, data: [7, 8, 9] })\npool.addTask({ taskId: 3, data: [10, 11, 12] })\n\n// Wait for all workers to complete\npool.allSettled(threads => {\n  console.log(`All ${threads.length} workers completed`)\n  threads.forEach(thread => {\n    console.log(`Worker result: ${thread.message}`)\n  })\n})\n"})}),"\n",(0,s.jsx)(r.h2,{id:"types",children:"Types"}),"\n",(0,s.jsx)(r.h3,{id:"systeminfo",children:"SystemInfo"}),"\n",(0,s.jsx)(r.p,{children:"Information about the system's hardware resources."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type SystemInfo = {\n  cores: number;   // Number of physical CPU cores\n  threads: number; // Number of logical CPU threads\n  memory: number;  // Total system memory in bytes\n};\n"})}),"\n",(0,s.jsx)(r.h3,{id:"workerpooloptions",children:"WorkerPoolOptions"}),"\n",(0,s.jsx)(r.p,{children:"Supported constructor argument patterns for WorkerPool."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"type WorkerPoolOptions =\n  | [file: string | URL, options: ThreadWorkerOptions, customOptions: Record<any, any>] // 3 arguments\n  | [file: string | URL, options: ThreadWorkerOptions] // 2 arguments\n  | [fileOrOptions: string | URL | ThreadWorkerOptions] // 1 argument\n  | []; // 0 arguments\n"})}),"\n",(0,s.jsx)(r.p,{children:"Four different calling patterns are supported:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"new WorkerPool()"})," - Empty pool with no defaults"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"new WorkerPool(fileOrOptions)"})," - With file path or options object"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"new WorkerPool(file, options)"})," - With separate file path and options"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"new WorkerPool(file, options, customOptions)"})," - With file, worker options, and pool options"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(r.h3,{id:"system",children:"system"}),"\n",(0,s.jsx)(r.p,{children:"Gets information about the system's hardware resources."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"get system(): SystemInfo\n"})}),"\n",(0,s.jsx)(r.h4,{id:"example",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"const pool = new WorkerPool('./worker.js');\nconsole.log(`Running on a system with ${pool.system.cores} physical cores`);\nconsole.log(`${pool.system.threads} logical threads available`);\nconsole.log(`${Math.round(pool.system.memory / 1024 / 1024)} MB RAM`);\n"})}),"\n",(0,s.jsx)(r.h3,{id:"maxthreadthreshold",children:"maxThreadThreshold"}),"\n",(0,s.jsx)(r.p,{children:"Maximum CPU usage threshold (percentage) for scheduling worker threads. When CPU usage is above this threshold, no new workers will be scheduled."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"maxThreadThreshold: number = 98\n"})}),"\n",(0,s.jsx)(r.h3,{id:"poolsize",children:"poolSize"}),"\n",(0,s.jsx)(r.p,{children:"Gets or sets the maximum number of worker threads that can run concurrently. Defaults to the number of physical CPU cores minus one."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"get poolSize(): number\nset poolSize(value: number)\n"})}),"\n",(0,s.jsx)(r.h4,{id:"set",children:"Set"}),"\n",(0,s.jsx)(r.p,{children:"Sets the maximum number of worker threads that can run concurrently."}),"\n",(0,s.jsx)(r.p,{children:"Parameters:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"value"}),": Pool size (minimum: 1)"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"get",children:"Get"}),"\n",(0,s.jsx)(r.p,{children:"Gets the maximum number of worker threads that can run concurrently."}),"\n",(0,s.jsx)(r.p,{children:"Returns:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Current maximum pool size"}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"pinginterval",children:"pingInterval"}),"\n",(0,s.jsx)(r.p,{children:"Sets the interval in milliseconds between worker scheduling attempts."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"set pingInterval(value: number)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Parameters:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"value"}),": Ping interval in milliseconds (minimum: 1)"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(r.h3,{id:"constructor",children:"constructor"}),"\n",(0,s.jsx)(r.p,{children:"Creates a new WorkerPool."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"constructor(...options: WorkerPoolOptions)\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"options"}),": Worker pool configuration"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"// Empty pool (each worker must specify file path)\nconst pool1 = new WorkerPool();\n\n// Pool with default file path\nconst pool2 = new WorkerPool('./worker.js');\n\n// Pool with default file path and worker options\nconst pool3 = new WorkerPool('./worker.js', {\n  workerData: { sharedConfig: 'value' }\n});\n\n// Pool with default file, worker options, and pool settings\nconst pool4 = new WorkerPool('./worker.js',\n  { workerData: { sharedConfig: 'value' } },\n  {\n    poolSize: 4,\n    pingInterval: 200,\n    maxThreadThreshold: 85\n  }\n);\n"})}),"\n",(0,s.jsx)(r.h3,{id:"status",children:"status"}),"\n",(0,s.jsx)(r.p,{children:"Gets status information about the worker pool."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"status(...args): StatusResponse<WorkerThread>\n"})}),"\n",(0,s.jsx)(r.p,{children:"See TaskPool.status() for detailed documentation on parameters and return types."}),"\n",(0,s.jsx)(r.h3,{id:"iscompleted",children:"isCompleted"}),"\n",(0,s.jsx)(r.p,{children:"Checks if all worker threads in the pool have completed."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"isCompleted(emit?: boolean): boolean\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"emit"}),": (Optional) If true, emits the 'complete' event when all tasks are done"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"boolean"}),": True if all worker threads are completed"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"hasavailablethread",children:"hasAvailableThread"}),"\n",(0,s.jsx)(r.p,{children:"Checks if the pool has capacity for another active worker thread, taking into account both pool size and system CPU usage."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"hasAvailableThread(): boolean\n"})}),"\n",(0,s.jsx)(r.h4,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"boolean"}),": True if another worker thread can be started"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"enableexiteventfallback",children:"enableExitEventFallback"}),"\n",(0,s.jsx)(r.p,{children:"Enables or disables the worker exit event fallback mechanism. Some environments like Bun or Deno might not fully support worker 'exit' events. This method enables a fallback that uses message passing for exit events."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"async enableExitEventFallback(force?: boolean): Promise<void>\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"force"}),": (Optional) Force enable/disable fallback, or auto-detect if undefined"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"const pool = new WorkerPool('./worker.js')\n\n// Auto-detect if exit event fallback is needed\nawait pool.enableExitEventFallback()\n\n// Or force enable it\nawait pool.enableExitEventFallback(true)\n"})}),"\n",(0,s.jsx)(r.h3,{id:"addworker",children:"addWorker"}),"\n",(0,s.jsx)(r.p,{children:"Adds a worker to the pool with specified options. Worker options are merged with the default options for the pool."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"addWorker(...threadArgs: WorkerThreadOptions): WorkerThread\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"threadArgs"}),": Worker configuration arguments"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-2",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"The created worker thread instance"}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"example-2",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"const pool = new WorkerPool('./default-worker.js')\n\n// Use default worker script with custom worker data\nconst worker1 = pool.addWorker({ workerData: { taskId: 1 } })\n\n// Use a different worker script\nconst worker2 = pool.addWorker('./special-worker.js', {\n  workerData: { taskId: 2 },\n})\n\n// Add worker with metadata\nconst worker3 = pool.addWorker('./worker.js',\n  { workerData: { taskId: 3 } },\n  { id: 'critical-task' },\n)\n"})}),"\n",(0,s.jsx)(r.h3,{id:"addtask",children:"addTask"}),"\n",(0,s.jsx)(r.p,{children:"Adds a worker to the pool using the default worker script with specified data. This is a simplified interface for adding workers when you only need to vary the worker data."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"addTask(workerData?: any, meta?: any): WorkerThread\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"workerData"}),": (Optional) Data to pass to the worker thread"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"meta"}),": (Optional) Optional metadata to associate with the worker"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-3",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"The created worker thread instance"}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"example-3",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"const pool = new WorkerPool('./worker.js')\n\n// Add workers with different task data\nconst worker1 = pool.addTask({ taskId: 1, data: [1, 2, 3] })\nconst worker2 = pool.addTask({ taskId: 2, data: [4, 5, 6] })\n\n// Add worker with data and metadata\nconst worker3 = pool.addTask(\n  { taskId: 3, data: [7, 8, 9] },\n  { priority: 'high', retryCount: 3 },\n)\n"})}),"\n",(0,s.jsx)(r.h3,{id:"then",children:"then"}),"\n",(0,s.jsx)(r.p,{children:"Adds a callback for successful worker completions. The callback will be called each time any worker completes successfully."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"then(onFulfilled: (value: any, thread: WorkerThread) => void): this\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"onFulfilled"}),": Callback for successful worker completion"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-4",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"This instance for chaining"}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"example-4",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"pool.then((data, thread) => {\n  console.log(`Worker ${thread.meta?.id} succeeded with:`, data)\n})\n"})}),"\n",(0,s.jsx)(r.h3,{id:"catch",children:"catch"}),"\n",(0,s.jsx)(r.p,{children:"Adds a callback for worker errors. The callback will be called each time any worker encounters an error."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"catch(onRejected: (error: any, type: 'error' | 'messageerror', thread: WorkerThread) => void): this\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"onRejected"}),": Callback for worker errors"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-5",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"This instance for chaining"}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"example-5",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"pool.catch((error, type, thread) => {\n  console.error(`Worker ${thread.meta?.id} failed:`, error)\n  console.error(`Error type: ${type}`)\n})\n"})}),"\n",(0,s.jsx)(r.h3,{id:"finally",children:"finally"}),"\n",(0,s.jsx)(r.p,{children:"Adds a callback for worker completions, regardless of success or failure. The callback will be called each time any worker completes."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"finally(onFinally: (exitCode: any, thread: WorkerThread) => void): this\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"onFinally"}),": Callback for worker completion"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-6",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"This instance for chaining"}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"example-6",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"pool.finally((exitCode, thread) => {\n  console.log(`Worker ${thread.meta?.id} completed with exit code: ${exitCode}`)\n})\n"})}),"\n",(0,s.jsx)(r.h3,{id:"allsettled",children:"allSettled"}),"\n",(0,s.jsx)(r.p,{children:"Registers a callback that will be invoked when all workers have completed, regardless of success or failure."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"allSettled(callback: (threads: WorkerThread[]) => void): this\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"callback"}),": Function called with array of all completed worker threads"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-7",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"This instance for chaining"}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"example-7",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"pool.allSettled(threads => {\n  console.log(`All ${threads.length} tasks completed`)\n\n  // Count successful and failed threads\n  const successful = threads.filter(t => t.status.SUCCESS).length\n  const failed = threads.filter(t => t.status.ERROR).length\n\n  console.log(`${successful} succeeded, ${failed} failed`)\n})\n"})}),"\n",(0,s.jsx)(r.h3,{id:"all",children:"all"}),"\n",(0,s.jsx)(r.p,{children:"Registers a callback that will be invoked when either all workers have completed successfully or any worker fails."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"all(callback: (threads: WorkerThread[] | Error) => void): this\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"callback"}),": Function called with array of workers or error"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-8",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"This instance for chaining"}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"example-8",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"pool.all(result => {\n  if (result instanceof Error) {\n    console.error('At least one task failed:', result)\n  } else {\n    console.log(`All ${result.length} tasks succeeded`)\n    result.forEach(thread => {\n      console.log(`Task result:`, thread.message)\n    })\n  }\n})\n"})}),"\n",(0,s.jsx)(r.h3,{id:"any",children:"any"}),"\n",(0,s.jsx)(r.p,{children:"Registers a callback that will be invoked when either the first worker completes successfully, or all workers have failed."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"any(callback: (data: any | AggregateError, thread: WorkerThread | undefined) => void): this\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"callback"}),": Function called with result or AggregateError"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-9",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"This instance for chaining"}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"example-9",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"pool.any((result, thread) => {\n  if (result instanceof AggregateError) {\n    console.error('All tasks failed:', result)\n  } else {\n    console.log(`Task succeeded with result:`, result)\n    console.log(`Completed thread:`, thread)\n  }\n})\n"})}),"\n",(0,s.jsx)(r.h3,{id:"race",children:"race"}),"\n",(0,s.jsx)(r.p,{children:"Registers a callback that will be invoked when any worker completes or fails. The callback receives the result or error from the first worker to settle."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"race(callback: (data: any, thread: WorkerThread) => void): this\n"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"callback"}),": Function called with result and worker"]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-10",children:"Returns"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"This instance for chaining"}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"example-10",children:"Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"pool.race((result, thread) => {\n  console.log(`First worker to complete:`, thread)\n  console.log(`Result:`, result)\n\n  // Check if it was successful\n  if (thread.status.SUCCESS) {\n    console.log('Worker succeeded')\n  } else {\n    console.log('Worker failed')\n  }\n})\n"})}),"\n",(0,s.jsx)(r.h2,{id:"events",children:"Events"}),"\n",(0,s.jsx)(r.p,{children:"The FunctionPool class emits the following events:"}),"\n",(0,s.jsx)(r.h3,{id:"workerinit",children:"worker.init"}),"\n",(0,s.jsx)(r.p,{children:"When a worker thread is initialized and starts execution."}),"\n",(0,s.jsx)(r.h3,{id:"workeronline",children:"worker.online"}),"\n",(0,s.jsx)(r.p,{children:"When a worker thread is online."}),"\n",(0,s.jsx)(r.h3,{id:"workermessage",children:"worker.message"}),"\n",(0,s.jsx)(r.p,{children:"When a worker thread completes successfully with a result."}),"\n",(0,s.jsx)(r.h3,{id:"workererror",children:"worker.error"}),"\n",(0,s.jsx)(r.p,{children:"When a worker thread throws an error directly during execution."}),"\n",(0,s.jsx)(r.h3,{id:"workermessageerror",children:"worker.messageerror"}),"\n",(0,s.jsx)(r.p,{children:"When a worker thread's promise rejects with an error."}),"\n",(0,s.jsx)(r.h3,{id:"workerexit",children:"worker.exit"}),"\n",(0,s.jsx)(r.p,{children:"When a worker thread completes execution (either success or error)."}),"\n",(0,s.jsx)(r.h3,{id:"workerstatus",children:"worker.status"}),"\n",(0,s.jsx)(r.p,{children:"When a worker thread's status changes."}),"\n",(0,s.jsx)(r.h3,{id:"complete",children:"complete"}),"\n",(0,s.jsx)(r.p,{children:"When all tasks in the pool have completed."})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3467],{3331:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>a});var n=t(8101);const i={},s=n.createContext(i);function o(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:r},e.children)}},8594:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"api/function/main-thread","title":"Worker Import Functions","description":"Functions for importing modules to run in worker threads. These functions provide different approaches for executing code in separate threads, with varying levels of persistence and interaction patterns.","source":"@site/docs/api/function/main-thread.md","sourceDirName":"api/function","slug":"/api/function/main-thread","permalink":"/threadpool/docs/api/function/main-thread","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/threadpool/tree/master/docs/docs/api/function/main-thread.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"FunctionPool","permalink":"/threadpool/docs/api/function/function-pool"},"next":{"title":"Web API","permalink":"/threadpool/docs/category/web-api"}}');var i=t(5105),s=t(3331);const o={sidebar_position:3},a="Worker Import Functions",l={},d=[{value:"Functions",id:"functions",level:2},{value:"setWorkerFile",id:"setworkerfile",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Example",id:"example",level:4},{value:"getWorkerFile",id:"getworkerfile",level:3},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example-1",level:4},{value:"importTaskWorker",id:"importtaskworker",level:3},{value:"Type Parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-2",level:4},{value:"importWorker",id:"importworker",level:3},{value:"Type Parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-3",level:4},{value:"importPersistentWorker",id:"importpersistentworker",level:3},{value:"Type Parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-4",level:4}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"worker-import-functions",children:"Worker Import Functions"})}),"\n",(0,i.jsx)(r.p,{children:"Functions for importing modules to run in worker threads. These functions provide different approaches for executing code in separate threads, with varying levels of persistence and interaction patterns."}),"\n",(0,i.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(r.h3,{id:"setworkerfile",children:"setWorkerFile"}),"\n",(0,i.jsx)(r.p,{children:"Sets the path to the worker script file. This allows customizing the worker script location rather than using the default worker-thread.ts script."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"function setWorkerFile(filename: URL | string): void\n"})}),"\n",(0,i.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"filename"}),": Path to the worker script file"]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"// Use a custom worker script\nsetWorkerFile(new URL('./my-custom-worker.js', import.meta.url))\n\n// Later worker imports will use this custom script\nconst worker = await importWorker('./math.js')\n"})}),"\n",(0,i.jsx)(r.h3,{id:"getworkerfile",children:"getWorkerFile"}),"\n",(0,i.jsx)(r.p,{children:"Gets the currently set worker script path or falls back to the default."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"function getWorkerFile(): URL | string\n"})}),"\n",(0,i.jsx)(r.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"The current worker script path"}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"// Check which worker script is currently in use\nconst workerPath = getWorkerFile()\nconsole.log('Using worker script at:', workerPath.toString())\n"})}),"\n",(0,i.jsx)(r.h3,{id:"importtaskworker",children:"importTaskWorker"}),"\n",(0,i.jsx)(r.p,{children:"Imports a module as a one-time task in a worker thread. The worker is terminated after a single property access or method call. No further interaction with the module is possible after the request. It is designed for the sole purpose of being a shorthand for the FunctionPool.addTask method."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"function importTaskWorker<T>(filename: string | URL, workerOptions?: WorkerOptions, messageOptions?: MessageOptions): Promise<DeferredPromisifyModule<T>>\n"})}),"\n",(0,i.jsx)(r.h4,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"T"}),": Type of the module being imported"]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"filename"}),": Path to the module to import in the worker"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"workerOptions"}),": (Optional) Node.js worker_threads options"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"messageOptions"}),": (Optional) Options for message handling"]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Promise for the deferred module proxy"}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"// Import a module with math functions\nimport type * as MathModule from './math.js'\n\n// Create a Function Worker Pool\nconst pool = new FunctionPool()\n\n// Calculate fibonacci in a worker and get result without persisting the worker\nconst { fib } = await importTaskWorker<typeof MathModule>('./math.js')\n\n// Instead of passing a task function that calls await fib(42),\n// importTaskWorker automatically wraps the method so it's run as a worker\npool.addTask(fib(42))\n\n// vs.\nconst { fib: fib2 } = await importWorker<typeof MathModule>('./math.js')\npool.addTask(() => fib2(42))\n// both lines of code do the same thing!\n"})}),"\n",(0,i.jsx)(r.h3,{id:"importworker",children:"importWorker"}),"\n",(0,i.jsx)(r.p,{children:"Imports a module in a worker thread and immediately executes all exported methods. The worker is automatically terminated after any method call. This is useful for one-off computations where you want to immediately execute a function."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"function importWorker<T>(filename: string | URL, workerOptions?: WorkerOptions, messageOptions?: MessageOptions): Promise<PromisifyModule<T>>\n"})}),"\n",(0,i.jsx)(r.h4,{id:"type-parameters-1",children:"Type Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"T"}),": Type of the module being imported"]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"filename"}),": Path to the module to import in the worker"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"workerOptions"}),": (Optional) Node.js worker_threads options"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"messageOptions"}),": (Optional) Options for message handling"]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Promise for the immediate-execution module proxy"}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"example-3",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"// Import a module with math functions\nimport type * as MathModule from './math.js'\n\n// This will create a worker, execute fib(40), and terminate the worker\nconst { fib } = await importWorker<typeof MathModule>('./math.js')\nconsole.log(await fib(42)) // 267914296\n\n// Each call creates a new worker\nconst sum = await importWorker<typeof MathModule>('./math.js').add(5, 10)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"importpersistentworker",children:"importPersistentWorker"}),"\n",(0,i.jsx)(r.p,{children:"Imports a module in a persistent worker thread. The worker remains active until manually terminated, allowing for multiple method calls and stateful interactions with the module."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"function importPersistentWorker<T>(filename: string | URL, workerOptions?: WorkerOptions, messageOptions?: MessageOptions): Promise<PromisifyModule<T & Terminable>>\n"})}),"\n",(0,i.jsx)(r.h4,{id:"type-parameters-2",children:"Type Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"T"}),": Type of the module being imported"]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"filename"}),": Path to the module to import in the worker"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"workerOptions"}),": (Optional) Node.js worker_threads options"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"messageOptions"}),": (Optional) Options for message handling"]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Promise for the persistent module proxy with terminate method"}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"example-4",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"// Import a module with math functions\nimport type * as MathModule from './math.js'\n\n// Create a persistent worker that keeps state between calls\nconst math = await importPersistentWorker<typeof MathModule>('./math.js')\n\n// First calculation\nconst result1 = await math.add(1, 2)\n\n// Second calculation using the same worker\nconst result2 = await math.multiply(result1, 4)\n\n// Terminate when done\nmath.terminate()\n"})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);